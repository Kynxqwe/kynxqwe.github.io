<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>隙间集</title>
    <link href="https://lyle.qzz.io/feed.xml" rel="self" />
    <link href="https://lyle.qzz.io" />
    <updated>2025-10-31T17:16:34+08:00</updated>
    <author>
        <name>Lyle</name>
    </author>
    <id>https://lyle.qzz.io</id>

    <entry>
        <title>2025.10.25 反思</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/20251025-reflection/"/>
        <id>https://lyle.qzz.io/20251025-reflection/</id>
        <media:content url="https://lyle.qzz.io/media/posts/39/TRAE-FriendsNanjing.png" medium="image" />
            <category term="随笔小记"/>

        <updated>2025-10-26T22:44:02+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/39/TRAE-FriendsNanjing.png" alt="" />
                    在参加了TRAE Friends@南京的活动之后，我发现我所缺失的不是代码能力和学习能力，而是对于产品和软件有自己的思考。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/39/TRAE-FriendsNanjing.png" class="type:primaryImage" alt="" /></p>
                <p>在参加了TRAE Friends@南京的活动之后，我发现我所缺失的不是代码能力和学习能力，而是对于产品和软件有自己的思考。</p><p>我承认我自己确实不会是一个愿意为了方便牺牲任何性能的人。且我对目录，软件都有着别人看起来甚至是有一点过于严谨。如果是Markdown文档编辑的软件我甚至会不喜欢任何多余的主题，就是这样的行为也被我的朋友称之为“赛博洁癖”。但是就是因为这样，我才发现根本就不可能会有什么很好的创意在我这里诞生。</p><p>之前看到过一个开源软件，名字是<code>Chronnote</code>，这是一个AI驱动的笔记软件。不得不说想法确实是非常新颖，但是这个软件我在第二个版本开始就再也没有用过，毕竟这样一个软件的开销自然是不小的，相比于<code>Typora</code>，我觉得没有任何一个功能是我觉得值得我留下的，就像之前没有找到<code>Typora</code>免费使用的方法的时候我一直都是使用的<code>Obsdian</code>这个笔记软件，但是我真的有了<code>Typora</code>之后我感觉<code>Obsdian</code>的那些别人吹的天花乱坠的功能在我这里狗屁不是。不是说这个软件不好用之类的，主要是如果占用资源<code>200MB</code>就能右很好的体验去写好一个Markdown文档我是断然不会去使用更大的资源去加上那些我觉得可能一个月都用不上几回的功能。</p><p>但是去了之后，我发现很多人做出来的功能都是我从来不会去使用甚至我觉得毫无意义的东西。就比如说寻找搭子的软件，这个软件从我的角度上来说就是一无是处，但是我却不能以偏概全的去否定这个软件在女生市场上的普及。我眼中似乎只有效率工具，对于玄学，算命，批改作业平台等等的东西觉得都是扯淡，毕竟我更喜欢的是两个效率工具的叠加使用去完成某种任务，或者是改变原有效率工具的使用用途，就比如微信，QQ上寻找搭子来替代别的软件，将Markdown编辑代替Word完成文档的撰写。但是我只从我的视角出发，却忽略了一个重要的东西，大多数人的需求。这或许就是市场需求。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>MySQL 常用系统函数表</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/commonly-used-mysql-system-functions-table/"/>
        <id>https://lyle.qzz.io/commonly-used-mysql-system-functions-table/</id>
        <media:content url="https://lyle.qzz.io/media/posts/38/Commonly-Used-MySQL-System-Functions-Table.png" medium="image" />
            <category term="MySQL学习笔记"/>

        <updated>2025-10-23T21:37:33+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/38/Commonly-Used-MySQL-System-Functions-Table.png" alt="" />
                    字符串函数 函数&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/38/Commonly-Used-MySQL-System-Functions-Table.png" class="type:primaryImage" alt="" /></p>
                <h2 id="字符串函数">字符串函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>CONCAT(str1, str2, ...)</code></td>
<td>连接字符串</td>
<td><code>SELECT CONCAT(&#39;Hello&#39;, &#39; &#39;, &#39;World&#39;);</code>→ ‘Hello World’</td>
</tr>
<tr>
<td><code>SUBSTRING(str, pos, len)</code></td>
<td>提取子字符串</td>
<td><code>SELECT SUBSTRING(&#39;MySQL&#39;, 3, 3);</code>→ ‘SQL’</td>
</tr>
<tr>
<td><code>LENGTH(str)</code></td>
<td>返回字符串字节长度</td>
<td><code>SELECT LENGTH(&#39;数据库&#39;);</code>→ 6 (UTF-8)</td>
</tr>
<tr>
<td><code>CHAR_LENGTH(str)</code></td>
<td>返回字符数量</td>
<td><code>SELECT CHAR_LENGTH(&#39;数据库&#39;);</code>→ 3</td>
</tr>
<tr>
<td><code>UPPER(str)</code></td>
<td>转换为大写</td>
<td><code>SELECT UPPER(&#39;mysql&#39;);</code>→ ‘MYSQL’</td>
</tr>
<tr>
<td><code>LOWER(str)</code></td>
<td>转换为小写</td>
<td><code>SELECT LOWER(&#39;MySQL&#39;);</code>→ ‘mysql’</td>
</tr>
<tr>
<td><code>TRIM([remstr FROM] str)</code></td>
<td>去除首尾空格/指定字符</td>
<td><code>SELECT TRIM(&#39;  MySQL  &#39;);</code>→ ‘MySQL’</td>
</tr>
<tr>
<td><code>REPLACE(str, from_str, to_str)</code></td>
<td>替换字符串</td>
<td><code>SELECT REPLACE(&#39;abc&#39;, &#39;b&#39;, &#39;x&#39;);</code>→ ‘axc’</td>
</tr>
<tr>
<td><code>REVERSE(str)</code></td>
<td>反转字符串</td>
<td><code>SELECT REVERSE(&#39;123&#39;);</code>→ ‘321’</td>
</tr>
<tr>
<td><code>LPAD(str, len, padstr)</code></td>
<td>左侧填充字符串</td>
<td><code>SELECT LPAD(&#39;5&#39;, 3, &#39;0&#39;);</code>→ ‘005’</td>
</tr>
</tbody></table>
<h2 id="数值函数">数值函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>ABS(x)</code></td>
<td>绝对值</td>
<td><code>SELECT ABS(-10);</code>→ 10</td>
</tr>
<tr>
<td><code>ROUND(x, d)</code></td>
<td>四舍五入</td>
<td><code>SELECT ROUND(3.14159, 2);</code>→ 3.14</td>
</tr>
<tr>
<td><code>CEIL(x)</code></td>
<td>向上取整</td>
<td><code>SELECT CEIL(3.14);</code>→ 4</td>
</tr>
<tr>
<td><code>FLOOR(x)</code></td>
<td>向下取整</td>
<td><code>SELECT FLOOR(3.99);</code>→ 3</td>
</tr>
<tr>
<td><code>MOD(x, y)</code></td>
<td>取模运算</td>
<td><code>SELECT MOD(10, 3);</code>→ 1</td>
</tr>
<tr>
<td><code>POW(x, y)</code></td>
<td>幂运算</td>
<td><code>SELECT POW(2, 3);</code>→ 8</td>
</tr>
<tr>
<td><code>SQRT(x)</code></td>
<td>平方根</td>
<td><code>SELECT SQRT(9);</code>→ 3</td>
</tr>
<tr>
<td><code>RAND()</code></td>
<td>随机数(0-1)</td>
<td><code>SELECT RAND();</code>→ 0.123456</td>
</tr>
<tr>
<td><code>SIGN(x)</code></td>
<td>符号函数</td>
<td><code>SELECT SIGN(-5);</code>→ -1</td>
</tr>
</tbody></table>
<h2 id="日期时间函数">日期时间函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>NOW()</code></td>
<td>当前日期时间</td>
<td><code>SELECT NOW();</code>→ 2025-10-23 21:31:02</td>
</tr>
<tr>
<td><code>CURDATE()</code></td>
<td>当前日期</td>
<td><code>SELECT CURDATE();</code>→ 2025-10-23</td>
</tr>
<tr>
<td><code>CURTIME()</code></td>
<td>当前时间</td>
<td><code>SELECT CURTIME();</code>→ 21:31:02</td>
</tr>
<tr>
<td><code>DATE(date)</code></td>
<td>提取日期部分</td>
<td><code>SELECT DATE(NOW());</code>→ 2025-10-23</td>
</tr>
<tr>
<td><code>TIME(date)</code></td>
<td>提取时间部分</td>
<td><code>SELECT TIME(NOW());</code>→ 21:31:02</td>
</tr>
<tr>
<td><code>YEAR(date)</code></td>
<td>提取年份</td>
<td><code>SELECT YEAR(NOW());</code>→ 2025</td>
</tr>
<tr>
<td><code>MONTH(date)</code></td>
<td>提取月份</td>
<td><code>SELECT MONTH(NOW());</code>→ 10</td>
</tr>
<tr>
<td><code>DAY(date)</code></td>
<td>提取日</td>
<td><code>SELECT DAY(NOW());</code>→ 23</td>
</tr>
<tr>
<td><code>HOUR(time)</code></td>
<td>提取小时</td>
<td><code>SELECT HOUR(NOW());</code>→ 21</td>
</tr>
<tr>
<td><code>MINUTE(time)</code></td>
<td>提取分钟</td>
<td><code>SELECT MINUTE(NOW());</code>→ 31</td>
</tr>
<tr>
<td><code>SECOND(time)</code></td>
<td>提取秒</td>
<td><code>SELECT SECOND(NOW());</code>→ 02</td>
</tr>
<tr>
<td><code>DATE_FORMAT(date, format)</code></td>
<td>格式化日期</td>
<td><code>SELECT DATE_FORMAT(NOW(), &#39;%Y/%m/%d&#39;);</code>→ ‘2025/10/23’</td>
</tr>
<tr>
<td><code>DATEDIFF(date1, date2)</code></td>
<td>日期差值(天)</td>
<td><code>SELECT DATEDIFF(&#39;2025-12-31&#39;, NOW());</code>→ 69</td>
</tr>
</tbody></table>
<h2 id="聚合函数">聚合函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>COUNT(expr)</code></td>
<td>行数统计</td>
<td><code>SELECT COUNT(*) FROM users;</code></td>
</tr>
<tr>
<td><code>SUM(expr)</code></td>
<td>求和</td>
<td><code>SELECT SUM(salary) FROM employees;</code></td>
</tr>
<tr>
<td><code>AVG(expr)</code></td>
<td>平均值</td>
<td><code>SELECT AVG(score) FROM exams;</code></td>
</tr>
<tr>
<td><code>MAX(expr)</code></td>
<td>最大值</td>
<td><code>SELECT MAX(price) FROM products;</code></td>
</tr>
<tr>
<td><code>MIN(expr)</code></td>
<td>最小值</td>
<td><code>SELECT MIN(temperature) FROM records;</code></td>
</tr>
<tr>
<td><code>GROUP_CONCAT(expr)</code></td>
<td>连接组内值</td>
<td><code>SELECT GROUP_CONCAT(name) FROM users GROUP BY department;</code></td>
</tr>
</tbody></table>
<h2 id="控制流函数">控制流函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>IF(expr, v1, v2)</code></td>
<td>条件判断</td>
<td><code>SELECT IF(score &gt;= 60, &#39;及格&#39;, &#39;不及格&#39;) FROM scores;</code></td>
</tr>
<tr>
<td><code>IFNULL(v1, v2)</code></td>
<td>NULL值处理</td>
<td><code>SELECT IFNULL(email, &#39;未设置&#39;) FROM users;</code></td>
</tr>
<tr>
<td><code>CASE</code></td>
<td>多条件分支</td>
<td><code>SELECT CASE WHEN score &gt;= 90 THEN &#39;A&#39; WHEN score &gt;= 80 THEN &#39;B&#39; ELSE &#39;C&#39; END FROM scores;</code></td>
</tr>
<tr>
<td><code>COALESCE(expr1, expr2, ...)</code></td>
<td>返回第一个非NULL值</td>
<td><code>SELECT COALESCE(middle_name, first_name, &#39;N/A&#39;) FROM persons;</code></td>
</tr>
</tbody></table>
<h2 id="系统信息函数">系统信息函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>VERSION()</code></td>
<td>MySQL版本</td>
<td><code>SELECT VERSION();</code>→ ‘8.0.xx’</td>
</tr>
<tr>
<td><code>USER()</code></td>
<td>当前用户</td>
<td><code>SELECT USER();</code>→ ‘root@localhost’</td>
</tr>
<tr>
<td><code>DATABASE()</code></td>
<td>当前数据库</td>
<td><code>SELECT DATABASE();</code>→ ‘mydb’</td>
</tr>
<tr>
<td><code>CONNECTION_ID()</code></td>
<td>连接ID</td>
<td><code>SELECT CONNECTION_ID();</code>→ 12345</td>
</tr>
<tr>
<td><code>LAST_INSERT_ID()</code></td>
<td>最后插入的ID</td>
<td><code>SELECT LAST_INSERT_ID();</code>→ 1001</td>
</tr>
</tbody></table>
<h2 id="json函数">JSON函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>JSON_EXTRACT(json_doc, path)</code></td>
<td>提取JSON值</td>
<td><code>SELECT JSON_EXTRACT(&#39;{&quot;name&quot;:&quot;John&quot;}&#39;, &#39;$.name&#39;);</code>→ “John”</td>
</tr>
<tr>
<td><code>JSON_SET(json_doc, path, val)</code></td>
<td>设置JSON值</td>
<td><code>SELECT JSON_SET(&#39;{}&#39;, &#39;$.id&#39;, 100);</code>→ {“id”: 100}</td>
</tr>
<tr>
<td><code>JSON_TYPE(json_val)</code></td>
<td>返回JSON类型</td>
<td><code>SELECT JSON_TYPE(&#39;[1,2]&#39;);</code>→ ‘ARRAY’</td>
</tr>
<tr>
<td><code>JSON_ARRAYAGG(col)</code></td>
<td>聚合为JSON数组</td>
<td><code>SELECT JSON_ARRAYAGG(name) FROM users;</code></td>
</tr>
</tbody></table>

            ]]>
        </content>
    </entry>
    <entry>
        <title>连接查询</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/join-query/"/>
        <id>https://lyle.qzz.io/join-query/</id>
        <media:content url="https://lyle.qzz.io/media/posts/37/Join-Query.png" medium="image" />
            <category term="MySQL学习笔记"/>

        <updated>2025-10-23T21:24:15+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/37/Join-Query.png" alt="" />
                    相比于之前的查询，使用连接查询可以交叉多张表的数据进行查询，便于在整理的时候可以很清晰的表明ID所对应的名字，使其更容易辨别出来。 语法格式：&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/37/Join-Query.png" class="type:primaryImage" alt="" /></p>
                <p>相比于之前的查询，使用连接查询可以交叉多张表的数据进行查询，便于在整理的时候可以很清晰的表明<code>ID</code>所对应的名字，使其更容易辨别出来。</p><h2 id="内连接查询">内连接查询</h2>
<p><strong>语法格式：</strong></p><pre><code class="language-sql">SELECT 需要显示的字段 FROM 表单1
    INNER JOIN 表单2 表单1.两张表共有字段=表单2.两张表共有字段;
</code></pre>
<p><strong>示例：</strong></p><pre><code class="language-sql">SELECT student_id 学号, student_name 姓名 score 成绩 FROM choose
    INNER JOIN student student.student_id=choose.student_id;
</code></pre>
<h2 id="外连接查询">外连接查询</h2>
<h3 id="语法格式：">语法格式：</h3>
<p><strong>左连接：</strong></p><pre><code class="language-sql">SELECT 需要显示的字段 FROM 主表
    LEFT JOIN 附表 主表.两张表共有字段=附表.两张表共有字段;
</code></pre>
<p><strong>右连接：</strong></p><pre><code class="language-sql">SELECT 需要显示的字段 FROM 附表
    LEFT JOIN 主表 附表.两张表共有字段=主表.两张表共有字段;
</code></pre>
<h3 id="示例：">示例：</h3>
<p><strong>左连接：</strong></p><pre><code class="language-sql">SELECT student_id 学号, student_name 姓名 score 成绩 FROM choose
    LEFT JOIN student student.student_id=choose.student_id;
</code></pre>
<p><strong>右连接：</strong></p><pre><code class="language-sql">SELECT student_id 学号, student_name 姓名 score 成绩 FROM choose
    RIGHT JOIN student student.student_id=choose.student_id;
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>绝对定位+相对定位 — 轮播图框架</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/absolute-positioning-relative-positioning-carousel-framework/"/>
        <id>https://lyle.qzz.io/absolute-positioning-relative-positioning-carousel-framework/</id>
        <media:content url="https://lyle.qzz.io/media/posts/36/Carousel-Framework.png" medium="image" />
            <category term="HTML&amp;CSS指北"/>

        <updated>2025-10-22T21:47:03+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/36/Carousel-Framework.png" alt="" />
                    源码 &lt;!DOCTYPE&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/36/Carousel-Framework.png" class="type:primaryImage" alt="" /></p>
                <h2 id="源码">源码</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;轮播图&lt;/title&gt;
        &lt;style&gt;
            * {
                margin: 0;
                padding: 0;
            }
            .carousel {
                width: 600px;
                height: 300px;
                background-color: lightskyblue;
                margin: 50px auto;
                border-radius: 10px;
                position: relative;
            }
            a {
                text-decoration: none;
                color: #fff;
            }
            .left, .right {
                width: 20px;
                height: 40px;
                border-radius: 3px;
                line-height: 40px;
                text-align: center;
                background-color: rgba(0, 0, 0, 0.2);
            }
            .left {
                position: absolute;
                bottom: 20px;
                right: 40px;
            }
            .right {
                position: absolute;
                bottom: 20px;
                right: 10px;
            }
            ul {
                list-style-type: none;
                position: absolute;
                bottom: 20px;
                left: 20px;
                /* transform: translate(-50%); */
            }
            ul li {
                width: 10px;
                height: 10px;
                border: 2px solid white;
                border-radius: 50%;
                float: left;
                margin: 0 5px;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;carousel&quot;&gt;
            &lt;!-- 导航按键 --&gt;
            &lt;a href=&quot;&quot; class=&quot;left&quot;&gt;&lt;&lt;/a&gt;
            &lt;a href=&quot;&quot; class=&quot;right&quot;&gt;&gt;&lt;/a&gt;
            
            &lt;!-- 圆点指示器	 --&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;/li&gt;
                &lt;li&gt;&lt;/li&gt;
                &lt;li&gt;&lt;/li&gt;
                &lt;li&gt;&lt;/li&gt;
                &lt;li&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="效果预览">效果预览</h2>
<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><style>.carousel{width:600px;height:300px;background-color:lightskyblue;margin:50px auto;border-radius:10px;position:relative}a{text-decoration:none;color:#fff}.left,.right{width:20px;height:40px;border-radius:3px;line-height:40px;text-align:center;background-color:rgba(0,0,0,.2)}.left{position:absolute;bottom:20px;right:40px}.right{position:absolute;bottom:20px;right:10px}.carousel-indicators{list-style-type:none;position:absolute;bottom:20px;left:20px;padding:0;margin:0}.carousel-indicator{width:10px;height:10px;border:2px solid #fff;border-radius:50%;float:left;margin:0 5px}</style></head><body><div class="carousel"><a href="" class="left">&lt;</a><a href="" class="right">&gt;</a><ul class="carousel-indicators"><li class="carousel-indicator"></li><li class="carousel-indicator"></li><li class="carousel-indicator"></li><li class="carousel-indicator"></li><li class="carousel-indicator"></li></ul></div></body></html>
    

            ]]>
        </content>
    </entry>
    <entry>
        <title>固定定位</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/fixed-positioning/"/>
        <id>https://lyle.qzz.io/fixed-positioning/</id>
        <media:content url="https://lyle.qzz.io/media/posts/35/Fixed-Positioning.png" medium="image" />
            <category term="HTML&amp;CSS指北"/>

        <updated>2025-10-22T21:39:57+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/35/Fixed-Positioning.png" alt="" />
                    固定定位可以使用于很多网站上，就比如正常滚动网页的时候，正常的网页上一般都会有一个上方，左侧等等位置会有一个导航栏等东西。但是随着页面滚动之后如果是页面元素会正常向上滚动，所以为了让这个元素正常固定，就需要使用到固定定位。 .elements&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/35/Fixed-Positioning.png" class="type:primaryImage" alt="" /></p>
                <p>固定定位可以使用于很多网站上，就比如正常滚动网页的时候，正常的网页上一般都会有一个上方，左侧等等位置会有一个导航栏等东西。但是随着页面滚动之后如果是页面元素会正常向上滚动，所以为了让这个元素正常固定，就需要使用到固定定位。</p><h2 id="概念">概念</h2>
<table>
<thead>
<tr>
<th align="center">相对定位</th>
<th align="center">绝对定位</th>
<th align="center">固定定位</th>
</tr>
</thead>
<tbody><tr>
<td align="center">相对于元素自己本身的位置。</td>
<td align="center">相对于非<code>static</code>（静态）的父元素进行移动，若没有父元素或所有父元素均为<code>static</code>（静态），则默认相对于浏览器窗口进行移动。</td>
<td align="center">相对于浏览器窗口，且不会因为任何父元素的<code>position</code>改变而变化。</td>
</tr>
<tr>
<td align="center">原本的元素会继续保持在原本文档流的位置不动。</td>
<td align="center">原内容会脱离正常的文档流，会对后面的元素产生一定的影响。</td>
<td align="center">原内容会脱离正常的文档流，会对后面的元素产生一定的影响。</td>
</tr>
</tbody></table>
<h2 id="语法格式">语法格式</h2>
<h3 id="属性">属性</h3>
<blockquote>
<ul>
<li><code>position</code>：默认值是<code>static</code>，固定定位则是<code>fixed</code></li>
<li><code>top</code>：<strong>正值</strong>：相对于父元素的上边框增加多少距离（向下移动）；<strong>负值</strong>：相对于父元素的上边框减少多少距离（向上移动）；<strong>优先级高于<code>bottom</code></strong></li>
<li><code>left</code>：<strong>正值</strong>：相对于父元素的左边框增加多少距离（向右移动）；<strong>负值</strong>：相对于父元素的左边框减少多少距离（向左移动）；<strong>优先级高于<code>right</code></strong></li>
<li><code>bottom</code>：<strong>正值</strong>：相对于父元素的下边框增加多少距离（向上移动）；<strong>负值</strong>：相对于父元素的下边框减少多少距离（向下移动）</li>
<li><code>right</code>：<strong>正值</strong>：相对于父元素的右边框增加多少距离（向左移动）；<strong>负值</strong>：相对于父元素的右边框减少多少距离（向右移动）</li>
<li><code>z-index</code>：层级顺序，<strong>固定定位元素高于普通文档流中元素</strong></li>
</ul>
</blockquote>
<h3 id="格式">格式</h3>
<pre><code class="language-css">.elements {
    position: fixed;
    top: 10px;
    left: 20px;
}
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>绝对定位</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/absolute-positioning/"/>
        <id>https://lyle.qzz.io/absolute-positioning/</id>
        <media:content url="https://lyle.qzz.io/media/posts/33/absolute.png" medium="image" />
            <category term="HTML&amp;CSS指北"/>

        <updated>2025-10-15T20:40:15+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/33/absolute.png" alt="" />
                    在使用相对定位对元素进行微调之后，在相对定位的元素内就可以对内部的组件进行很轻易的左右对齐和上下移动等等操作。但是相较于相对定位，在很多概念上面其实并不是非常一致，例如普通文档流中和定位上下文（包含块）等。 .elements&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/33/absolute.png" class="type:primaryImage" alt="" /></p>
                <p>在使用相对定位对元素进行微调之后，在相对定位的元素内就可以对内部的组件进行很轻易的左右对齐和上下移动等等操作。但是相较于相对定位，在很多概念上面其实并不是非常一致，例如普通文档流中和定位上下文（包含块）等。</p><h2 id="概念">概念</h2>
<table>
<thead>
<tr>
<th align="center">相对定位</th>
<th align="center">绝对定位</th>
</tr>
</thead>
<tbody><tr>
<td align="center">相对于元素自己本身的位置。</td>
<td align="center">相对于非<code>static</code>（静态）的父元素进行移动，若没有父元素或所有父元素均为<code>static</code>（静态），则默认相对于浏览器窗口进行移动。</td>
</tr>
<tr>
<td align="center">原本的元素会继续保持在原本文档流的位置不动。</td>
<td align="center">原内容会脱离正常的文档流，会对后面的元素产生一定的影响。</td>
</tr>
</tbody></table>
<h2 id="语法格式">语法格式</h2>
<h3 id="属性">属性</h3>
<blockquote>
<ul>
<li><code>position</code>：默认值是<code>static</code>，绝对定位则是<code>absolute</code></li>
<li><code>top</code>：<strong>正值</strong>：相对于父元素的上边框增加多少距离（向下移动）；<strong>负值</strong>：相对于父元素的上边框减少多少距离（向上移动）；<strong>优先级高于<code>bottom</code></strong></li>
<li><code>left</code>：<strong>正值</strong>：相对于父元素的左边框增加多少距离（向右移动）；<strong>负值</strong>：相对于父元素的左边框减少多少距离（向左移动）；<strong>优先级高于<code>right</code></strong></li>
<li><code>bottom</code>：<strong>正值</strong>：相对于父元素的下边框增加多少距离（向上移动）；<strong>负值</strong>：相对于父元素的下边框减少多少距离（向下移动）</li>
<li><code>right</code>：<strong>正值</strong>：相对于父元素的右边框增加多少距离（向左移动）；<strong>负值</strong>：相对于父元素的右边框减少多少距离（向右移动）</li>
<li><code>z-index</code>：层级顺序，<strong>绝对定位元素高于普通文档流中元素</strong></li>
<li><strong>当元素宽<code>width</code>和高<code>height</code>未定义的时候两个元素同时生效，无优先级之分</strong></li>
</ul>
</blockquote>
<h3 id="格式">格式</h3>
<pre><code class="language-css">.elements {
    position: relative;
}
.elements-container {
    position: absolute;
    top: 10px;
    left: 20px;
}
</code></pre>
<h2 id="案例">案例</h2>
<p>我认为最实用的还是下拉菜单这样的功能，于是选取这一个。</p><p><strong>以下是源码：</strong></p><pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;style&gt;
        .dropdown {
            position: relative;
            display: inline-block;
            margin: 20px;
        }
        
        .dropbtn {
            background: #3498db;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        
        .dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            min-width: 160px;
            background: white;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            opacity: 0;
            transform: translate(0, -20px);
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .dropdown-content a {
            display: block;
            padding: 12px 16px;
            text-decoration: none;
            color: #333;
            border-bottom: 1px solid #eee;
        }
        
        .dropdown-content a:hover {
            background: #f5f5f5;
        }
        
        .dropdown:hover .dropdown-content {
            opacity: 1;
            transform: translate(0, 0);
            visibility: visible;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;dropdown&quot;&gt;
        &lt;button class=&quot;dropbtn&quot;&gt;下拉菜单&lt;/button&gt;
        &lt;div class=&quot;dropdown-content&quot;&gt;
            &lt;a href=&quot;#&quot;&gt;菜单项 1&lt;/a&gt;
            &lt;a href=&quot;#&quot;&gt;菜单项 2&lt;/a&gt;
            &lt;a href=&quot;#&quot;&gt;菜单项 3&lt;/a&gt;
            &lt;a href=&quot;#&quot;&gt;菜单项 4&lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>效果预览：</strong>
<!DOCTYPE html><html><head><style>.dropdown{position:relative;display:inline-block;margin:20px;}.dropbtn{background:#3498db;color:white;padding:12px 24px;border:none;border-radius:4px;cursor:pointer;font-size:16px;}.dropdown-content{position:absolute;top:100%;left:0;min-width:160px;background:white;box-shadow:0 8px 16px rgba(0,0,0,0.2);opacity:0;transform:translate(0,-20px);visibility:hidden;transition:all 0.3s ease;}.dropdown-content a{display:block;padding:12px 16px;text-decoration:none;color:#333;border-bottom:1px solid #eee;}.dropdown-content a:hover{background:#f5f5f5;}.dropdown:hover .dropdown-content{opacity:1;transform:translate(0,0);visibility:visible;}</style></head><body><div class="dropdown"><button class="dropbtn">下拉菜单</button><div class="dropdown-content"><a href="#">菜单项 1</a><a href="#">菜单项 2</a><a href="#">菜单项 3</a><a href="#">菜单项 4</a></div></div></body></html></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>查询</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/mysql-query/"/>
        <id>https://lyle.qzz.io/mysql-query/</id>
        <media:content url="https://lyle.qzz.io/media/posts/32/Query.png" medium="image" />
            <category term="MySQL学习笔记"/>

        <updated>2025-10-14T23:18:18+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/32/Query.png" alt="" />
                    之前梳理过最简单的查询查询命令，也就是查询所有字段的命令，现在相比之前查询所有字段的命令无非就是多加上几个判断，筛选的条件，却可以使查询的内容更精准，提升查询的效率。 格式：&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/32/Query.png" class="type:primaryImage" alt="" /></p>
                <p>之前梳理过最简单的查询查询命令，也就是查询所有字段的命令，现在相比之前查询所有字段的命令无非就是多加上几个判断，筛选的条件，却可以使查询的内容更精准，提升查询的效率。</p><h2 id="单表查询">单表查询</h2>
<h3 id="查询所有字段：">查询所有字段：</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT * FROM 表格;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 查询department表所有字段：*/
SELECT * FROM department;
</code></pre>
<h3 id="查询指定字段数据">查询指定字段数据</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT 字段1, 字段2 FROM 表名;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 查询student表中的studemt_id和student_name字段 */
SELECT studemt_id, student_name FROM student;
</code></pre>
<h3 id="为指定字段添加别名">为指定字段添加别名</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT 字段1 AS 别名1, 字段2 AS 别名2 FROM 表名;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 将student表中studemt_id命名为学号，student_name命名为姓名 */
SELECT studemt_id AS 学号, student_name AS 姓名 FROM student;
</code></pre>
<h3 id="去除重复值">去除重复值</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT DISTINCT 字段 FROM 表名;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 去除学生表中重复的学生名字 */
SELECT DISTINCT student_name FROM student;
</code></pre>
<h2 id="条件查询">条件查询</h2>
<h3 id="where条件判断">WHERE条件判断</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT *或字段名 FROM 表名 WHERE 判断条件;
SELECT *或字段名 FROM 表名 WHERE (判断条件1) AND (判断条件2);
SELECT *或字段名 FROM 表名 WHERE YEAR();
SELECT *或字段名 FROM 表名 WHERE (字段 = &#39;值&#39; OR 字段 = &#39;值&#39;) AND 字段 = &#39;值&#39;;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 从学生表中筛选出学号为01的所有字段 */
SELECT * FROM student WHERE student_id = &#39;01&#39;;

/* 从学生表中筛选出学号01~07的 */
SELECT * FROM student WHERE (student_id &lt;= &#39;01&#39;) AND (student_id &gt;= &#39;07&#39;);

/* 从学生表中筛选出生日是2008年的 */
SELECT * FROM student WHERE YEAR(birthday) = 2008;

/* 从学生表中筛选出生学号是1或者是9的，并且性别为男。用括号将OR括起来是因为AND的优先级更高 */
SELECT * FROM student WHERE(student_id = &#39;1&#39; OR student_id = &#39;9&#39;) AND gender = &#39;男&#39; ;
</code></pre>
<h3 id="in运算符">IN运算符</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT *或字段名 FROM 表名 WHERE 字段 IN (值1, 值2);
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 从学生表中筛选出学号是1，2，3的人的信息 */
SELECT * FROM student WHERE student_id IN (1, 2, 3);
</code></pre>
<h3 id="between···and···运算符">BETWEEN···AND···运算符</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT *或字段名 FROM 表名 WHERE 字段 BETWEEN 值 AND 值;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 从学生表中筛选出学号是1，2，3的人的信息 */
SELECT * FROM student WHERE student_id IN BETWEEN 1 AND 3;
</code></pre>
<h3 id="like-运算符">LIKE 运算符</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT *或字段名 FROM 表名 WHERE 字段 LIKE &#39;_值&#39;;
SELECT *或字段名 FROM 表名 WHERE 字段 LIKE &#39;值%&#39;;
SELECT *或字段名 FROM 表名 WHERE 字段 LIKE &#39;_值%&#39;;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 从学生表中筛选出两个字名字，且其中有光字 - 和光*/
SELECT * FROM student WHERE student_name LIKE &#39;_光&#39;;
/* 从学生表中筛选出姓和的 - 和光*/
SELECT * FROM student WHERE student_name LIKE &#39;和%&#39;;
/* 从学生表中筛选出光前面有一个字，且后面字数不限的 - 和光同尘*/
SELECT * FROM student WHERE student_name LIKE &#39;_光%&#39;;
</code></pre>
<h3 id="is-null运算符">IS NULL运算符</h3>
<p><strong>格式：</strong></p><pre><code class="language-sql">SELECT *或字段名 FROM 表名 WHERE 字段 IS NULL;
SELECT *或字段名 FROM 表名 WHERE 字段 IS NOT NULL;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-sql">/* 从学生表中筛选出姓名是空值的 */
SELECT * FROM student WHERE student_name IS NULL;

/* 从学生表中筛选出姓名不是空值的 */
SELECT * FROM student WHERE student_name IS NULL;
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>相对定位</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/relative-positioning/"/>
        <id>https://lyle.qzz.io/relative-positioning/</id>
        <media:content url="https://lyle.qzz.io/media/posts/31/Relative-positioning.png" medium="image" />
            <category term="HTML&amp;CSS指北"/>

        <updated>2025-10-12T11:23:31+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/31/Relative-positioning.png" alt="" />
                    之前调整元素的位置只能使用margin,padding这些属性对其进行调整，例如元素的位置和周围的元素看起来高度不协调，一定是使用类似margin-top: 2px这样的方法去调整高度。但是这样必定会出现一个问题&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/31/Relative-positioning.png" class="type:primaryImage" alt="" /></p>
                <p>之前调整元素的位置只能使用<code>margin</code>,<code>padding</code>这些属性对其进行调整，例如元素的位置和周围的元素看起来高度不协调，一定是使用类似<code>margin-top: 2px</code>这样的方法去调整高度。但是这样必定会出现一个问题 — 如果存在父级元素，父级元素会受到这样移动的影响。如果想要达到移动的同时可以解决对父级元素的影响，相对定位一定是一个很好的解决方案。</p><h2 id="概念">概念</h2>
<p>相对定位的相对是相对于元素自己本身的位置，所以其原本的元素会继续保持在原本文档流的位置不动，只是显示的图片，文字等信息会进行位置的移动。</p><h2 id="语法格式">语法格式</h2>
<h3 id="属性">属性</h3>
<blockquote>
<ul>
<li><code>position</code>：默认值是<code>static</code>，相对定位则是<code>relative</code></li>
<li><code>top</code>：<strong>正值</strong>：相对于原有的上边框增加多少距离（向下移动）；<strong>负值</strong>：相对于原有的上边框减少多少距离（向上移动）；<strong>优先级高于<code>bottom</code></strong></li>
<li><code>left</code>：<strong>正值</strong>：相对于原有的左边框增加多少距离（向右移动）；<strong>负值</strong>：相对于原有的左边框减少多少距离（向左移动）；<strong>优先级高于<code>right</code></strong></li>
<li><code>bottom</code>：<strong>正值</strong>：相对于原有的下边框增加多少距离（向上移动）；<strong>负值</strong>：相对于原有的下边框减少多少距离（向下移动）</li>
<li><code>right</code>：<strong>正值</strong>：相对于原有的右边框增加多少距离（向左移动）；<strong>负值</strong>：相对于原有的右边框减少多少距离（向右移动）</li>
<li><code>z-index</code>：层级顺序，<strong>层级顺序相同时，书写位置靠后的默认层级更高</strong></li>
</ul>
</blockquote>
<h3 id="格式">格式</h3>
<pre><code class="language-css">.elements {
    position: relative;
    top: 10px;
    left: 20px;
}
</code></pre>
<p><code>注：top和，left层级高，写法就以这两个属性来写，另外两种的属性皆可实现相同效果</code></p><h2 id="案例">案例</h2>
<p>我觉得对话框这样的一个案例是其中可以写的东西最多的，于是只使用了这一个</p><p><strong>以下是源码：</strong></p><pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;对话框&lt;/title&gt;
        &lt;style&gt;
            * {
                margin: 0;
            }
            .tip {
                width: 150px;
                height: 80px;
                border: 4px solid red;
                border-radius: 6px;
                margin: 50px auto;
            }
            .triangle {
                width: 10px;
                height: 10px;
                border: 4px solid red;
                position: relative;
                left: 50%;
                top: -10px;
                transform: translate(-50%) rotate(45deg);
                border-bottom: none;
                border-right: none;
                background-color: #fff;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;tip&quot;&gt;
            &lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>效果预览：</strong></p><div class="tip"><div class="triangle"></div></div><style>.tip{width:150px;height:80px;border:4px solid red;border-radius:6px;margin:50px auto;}.triangle{width:10px;height:10px;border:4px solid red;position:relative;left:50%;top:-8px;transform:translate(-50%) rotate(45deg);border-bottom:none;border-right:none;background-color:#fff;}</style>

            ]]>
        </content>
    </entry>
    <entry>
        <title>NAS搭建及使用</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/nas-setup-and-usage/"/>
        <id>https://lyle.qzz.io/nas-setup-and-usage/</id>
        <media:content url="https://lyle.qzz.io/media/posts/28/677f5c027c6a14541.jpg_e1080.webp" medium="image" />
            <category term="随笔小记"/>

        <updated>2025-10-07T19:47:07+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/28/677f5c027c6a14541.jpg_e1080.webp" alt="" />
                    搭建 相对安装Linux操作系统而言FNOS的安装已经是十分简单的，进入U盘引导，选择Graphic&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/28/677f5c027c6a14541.jpg_e1080.webp" class="type:primaryImage" alt="" /></p>
                <h2 id="搭建">搭建</h2>
<p>相对安装Linux操作系统而言FNOS的安装已经是十分简单的，进入U盘引导，选择<code>Graphic Install</code>即可，但是在系统分区大小和使用Swap上还是需要注意。</p><h3 id="系统分区">系统分区</h3>
<p>系统分区大小其推荐的大小通常是64G，但是往往占用没有这么高，所以我选择的是使用默认大小的一半。</p><figure class="post__image"><img loading="lazy" src="../media/files/隙光微尘/NAS搭建及使用/image-20251007184859616.png" alt="安装后硬盘占用情况" data-is-external-image="true"></figure><h3 id="swap">Swap</h3>
<p>Swap这个东西就相当于Windows上面的内存分页和安卓上面的虚拟内存，在NAS上如果内存<code>&gt;8G</code>完全没有必要开这个去占储存空间。</p><h2 id="使用">使用</h2>
<h3 id="连接网址选择">连接网址选择</h3>
<p>我还是更愿意选择<code>fnos.net</code>，<code>5ddd.com</code>在我手上目前还没什么用处。之前带宽提升到8mbps，现在似乎已经没有了。</p><h3 id="账户">账户</h3>
<p>我个人还是更偏向于使用一个管理员账户，加上其他普通账户，这样即使密码泄露等问题都能进行改密码，改名字解决，即使他人登录对设备的破坏也不会很大。</p><h3 id="飞牛同步">飞牛同步</h3>
<p>这个功能算是我个人比较喜欢，但是因为小米云盘更好而展示没有找到使用的地方。</p><p>但是要是手机上面云空间存图片等东西完全够用也不想去额外购买网盘，使用NAS同步可以，但是毕竟不像小米云盘，iCloud一样有释放空间，如果文件没有完全同步过来使用软件对文件操作，容易出现同步失败，软件中很多操作也会出错。</p><figure class="post__image"><img loading="lazy" src="../media/files/隙光微尘/NAS搭建及使用/2735502f49ded478cabb2688bdbbb50e.jpg" alt="飞牛同步" data-is-external-image="true"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>数据表修改操作</title>
        <author>
            <name>Lyle</name>
        </author>
        <link href="https://lyle.qzz.io/modification-of-data-tables/"/>
        <id>https://lyle.qzz.io/modification-of-data-tables/</id>
        <media:content url="https://lyle.qzz.io/media/posts/26/Shu-Ju-Biao-Xiu-Gai.png" medium="image" />
            <category term="MySQL学习笔记"/>

        <updated>2025-09-28T20:38:00+08:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://lyle.qzz.io/media/posts/26/Shu-Ju-Biao-Xiu-Gai.png" alt="" />
                    字段和数据是组成数据表的两大核心要素，因此对它们的更改操作至关重要，直接关系到数据的完整性、一致性和系统稳定性。 重命名操作可以分为以下两种写法：&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://lyle.qzz.io/media/posts/26/Shu-Ju-Biao-Xiu-Gai.png" class="type:primaryImage" alt="" /></p>
                <p><strong>字段</strong>和<strong>数据</strong>是组成数据表的两大核心要素，因此对它们的更改操作至关重要，直接关系到数据的完整性、一致性和系统稳定性。</p><h2 id="字段信息的修改">字段信息的修改</h2>
<h3 id="重命名">重命名</h3>
<p><strong>重命名操作可以分为以下两种写法：</strong></p><pre><code class="language-mysql">RENAME 旧名字 TO 新名字;
</code></pre>
<pre><code class="language-my">ALTER TABLE 旧名字 RENAME 新名字;
</code></pre>
<p>两种写法没有任何区别,选择一个好记和习惯的即可。</p><h3 id="数据表中字段的增删改查操作">数据表中字段的增删改查操作</h3>
<h4 id="添加字段">添加字段</h4>
<pre><code class="language-mysql">ALTER TABLE 表名 ADD 新字段名 数据类型 约束条件;
</code></pre>
<h4 id="删除字段">删除字段</h4>
<pre><code class="language-mysql">ALTER TABLE 表名 DROP 字段名 ;
</code></pre>
<h4 id="修改字段">修改字段</h4>
<h5 id="修改除字段名的其他内容">修改除字段名的其他内容</h5>
<pre><code class="language-mysql">ALTER TABLE 表名 MODIFY 字段名 数据类型 约束条件;
</code></pre>
<h5 id="修改字段名其他内容">修改字段名+其他内容</h5>
<pre><code class="language-mysql">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型 约束条件;
</code></pre>
<h2 id="数据操作">数据操作</h2>
<h3 id="插入">插入</h3>
<p><strong>格式：</strong></p><pre><code class="language-mysql">INSERT INTO 表名 (字段, 字段) VALUES
    (&#39;值1&#39;, &#39;值2&#39;),
    (&#39;值1&#39;, &#39;值2&#39;);
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-mysql">INSERT INTO department (department_id, department_name) VALUES
    (&#39;01&#39;, &#39;技术部&#39;),
    (&#39;02&#39;, &#39;财务部&#39;),
    (&#39;03&#39;, &#39;人力资源部&#39;);
</code></pre>
<h3 id="修改">修改</h3>
<p><strong>格式：</strong></p><pre><code class="language-mysql">UPDATE 表名
    SET 字段=值, 字段=值, 字段=值 WHERE 条件表达式;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-mysql">UPDATE department
    SET department_name=&#39;市场部&#39; WHERE department_id=&#39;01&#39;；
</code></pre>
<h3 id="删除">删除</h3>
<p><strong>格式：</strong></p><pre><code class="language-mysql">DELETE FROM 表名 WHERE 条件表达式;
</code></pre>
<p><strong>例：</strong></p><pre><code class="language-mysql">DELETE FROM department WHERE department_id=&#39;01&#39;；
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
